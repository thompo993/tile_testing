# -*- coding: utf-8 -*-
"""PMTs_gainmatching.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OM-w3LGpF6LYaL6-cOxPIhB2lb5981fQ

#Setup
"""

from google.colab import drive
drive.mount('/content/drive/')

import numpy as np
from scipy.odr import ODR, Model, Data, RealData
from pylab import *
from matplotlib import pyplot as plt
from scipy import optimize
import os
from scipy.signal import find_peaks
from scipy import constants

def gaussian(x,a,b,c):
  return a*np.exp(-(x-b)**2/(2*c**2))

def gaussian_fit(i):
  guess = [1,i,0.1]
  popt, pcov = optimize.curve_fit(gaussian, volt, peak, p0 =guess, maxfev= 10**9)
  plt.scatter(volt,peak, s = 1)
  plt.plot(volt,gaussian(volt,*popt), color = 'r')
  plt.xlabel("Pulse height (V)")
  plt.ylabel("Counts")
  plt.title(file[:3])
  plt.grid()
  plt.show()
  return popt, pcov

"""#Channel 0"""

x0 = []
y0 = []
y0_sigma = []
for file in os.listdir("/content/drive/MyDrive/tesi magistrale/muSR tests/PMTS/ch0"):
  x0.append(int(file[:3])) #take voltage as x
  #import data
  data = np.loadtxt(open("/content/drive/MyDrive/tesi magistrale/muSR tests/PMTS/ch0/"+file,'rt').readlines(), dtype=float, delimiter="\t", skiprows=1)
  volt = data[10:200,0]
  peak = data[10:200,1]
  if file[:3] =="660":
    volt = data[25:200,0]
    peak = data[25:200,1]
  if int(file[:3]) >= 800:
    volt = data[10:70,0]
    peak = data[10:70,1]
  val, err = gaussian_fit(0.3)
  y0.append(val[1])
  y0_sigma.append(np.sqrt(np.absolute(err[1,1])))

a = np.array([x0,y0,y0_sigma], dtype=float)
a = a[:, a[0,:].argsort()]
print(a)
x0 = a[0,:]
print(x0)
y0 = a[1,:]
y0_sigma = a[2,:]

"""#Channel 1"""

x1 = []
y1 = []
y1_sigma = []
for file in os.listdir("/content/drive/MyDrive/tesi magistrale/muSR tests/PMTS/ch1"):
  x1.append(int(file[:3])) #take voltage as x
  #import data
  data = np.loadtxt(open("/content/drive/MyDrive/tesi magistrale/muSR tests/PMTS/ch1/"+file,'rt').readlines(), dtype=float, delimiter="\t", skiprows=1)
  volt = data[10:1200,2]
  peak = data[10:1200,3]

  val,err = gaussian_fit(0.3)
  y1.append(val[1])
  y1_sigma.append(np.sqrt(np.absolute(err[1,1])))

a = np.array([x1,y1,y1_sigma], dtype=float)
a = a[:, a[0,:].argsort()]
print(a)
x1 = a[0,:]
print(x0)
y1 = a[1,:]
y1_sigma = a[2,:]

"""#Final comparison"""

def retta(x,a,b):
  return a*x+b

linx = np.linspace(np.min(x0),np.max(x0), 10000)

plt.title("Gain matching")
plt.legend()

popt0, pcov0 = optimize.curve_fit(retta, x0, y0,sigma =y0_sigma,maxfev = 10**6)
plt.plot(linx,retta(linx,*popt0),label="ch0 fit")
popt1, pcov1 = optimize.curve_fit(retta, x1, y1,sigma =y1_sigma,maxfev = 10**6)
plt.plot(linx,retta(linx,*popt1),label="ch1 fit")
plt.errorbar(x0,y0,np.absolute(y0_sigma),  fmt='o', capsize = 10)
plt.errorbar(x1,y1,np.absolute(y1_sigma),  fmt='o', capsize = 10)
plt.xlabel("Voltage (V)")
plt.ylabel("Pulse height maximum")
plt.grid()
plt.show()

peak_pos = 0.4

volt_0 = (peak_pos - popt0[1])/popt0[0]
volt_1 = (peak_pos - popt1[1])/popt1[0]


print(volt_0)
print(volt_1)

def quad(x,a,b,c):
  return a*x*x+b*x+c

linx = np.linspace(np.min(x0),np.max(x0), 10000)

plt.title("Gain matching")
plt.legend()

poptq0, pcov0 = optimize.curve_fit(quad, x0, y0,sigma = y0_sigma,maxfev = 10**6)
plt.plot(linx,quad(linx,*poptq0),label="ch0 fit")
poptq1, pcov1 = optimize.curve_fit(quad, x1, y1,sigma =y1_sigma,maxfev = 10**6)
plt.plot(linx,quad(linx,*poptq1),label="ch1 fit")
plt.errorbar(x0,y0,np.absolute(y0_sigma),  fmt='o', capsize = 10)
plt.errorbar(x1,y1,np.absolute(y1_sigma),  fmt='o', capsize = 10)
plt.xlabel("Voltage (V)")
plt.ylabel("Pulse height maximum")
plt.grid()
plt.show()

a0 = poptq0[0]
b0 = poptq0[1]
c0 = poptq0[2]-peak_pos
a1 = poptq1[0]
b1 = poptq1[1]
c1 = poptq1[2]-peak_pos


voltq_0 = (-b0 + np.sqrt(b0**2-4*a0*c0))/(2*a0)
voltq_1 = (-b1 + np.sqrt(b1**2-4*a1*c1))/(2*a1)


print(voltq_0)
print(voltq_1)

for file in os.listdir("/content/drive/MyDrive/tesi magistrale/muSR tests/PMTS/comp"):
  data = np.loadtxt(open("/content/drive/MyDrive/tesi magistrale/muSR tests/PMTS/comp/"+file,'rt').readlines(), dtype=float, delimiter="\t", skiprows=1)
  volt = data[:,4]
  peak = data[:,5]/sum(data[:,5])
  if file[-6:] =="dV.dat":
    label = "quadratic fit"
  else:
    label = "linear fit"
  plt.plot(volt,peak, label = label)
  plt.xlabel("Pulse height (V)")
  plt.ylabel("Counts")

plt.legend()
plt.title("Comparison")
plt.grid()
plt.show()